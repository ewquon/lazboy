/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

// Domain size and number of cells.
xMin                 {xMin:f};                         // Minimum x-extent of domain (m).
yMin                 {yMin:f};                         // Minimum y-extent of domain (m).
zMin                 {zMin:f};                         // Minimum z-extent of domain (m).
xMax                 {xMax:f};                      // Maximum x-extent of domain (m).
yMax                 {yMax:f};                      // Maximum y-extent of domain (m).
zMax                 {zMax:f};                      // Maximum z-extent of domain (m).
nx                   {nx:d};                         // Number of cells in x-direction.
ny                   {ny:d};                         // Number of cells in y-direction.
nz                   {nz:d};                         // Number of cells in z-direction.




// Number of cores and domain decomposition information.
nCores               {nCores:d};                         // Number of cores on which to run this case.
decompType           {decompType:s};                      // Decomposition algorithm.  "simple" and "scotch" are good choices.
decompOrder          ({decompOrder[0]:d} {decompOrder[1]:d} {decompOrder[2]:d});                   // Order of the decomposition number of partitions in (x y z)-directions.




// Planar averaging and source term statistics options.
statisticsOn         {statisticsOn:s};                        // Gather planar-averaged flow statistics.
statisticsFrequency  {statisticsFrequency:d};                           // Frequency in time steps of statistics gathering.




// Initial values for the variables.
// Note that U and T get overwritten if setFieldsABL is called.
U0Mag                {U0Mag:f};                         // Initial condition for wind speed (m/s).
dir                  {dir:f};                       // Initial condition for wind direction (deg).
windHeight           {windHeight:f};                       // Height at which to drive mean wind to U0Mag/dir (m).
p_rgh0               {p_rgh0:f};                         // Initial pressure (minus the hydrostatic variation and normalized by density) (m^2/s^2).
nuSgs0               {nuSgs0:f};                         // Initial SGS viscosity (m^2/s).
k0                   {k0:f};                         // Initial SGS turbulent kinetic energy (m^2/s^2).
kappat0              {kappat0:f};                         // Initial SGS temperature diffusivity (m^2/s).
TGradUpper           {TGradUpper:f};                       // Potential temperature gradient above the strong inversion (K/m).
zInversion           {zInversion:f};                       // Height of the middle of the initial strong capping inversion (m).
inversionWidth       {inversionWidth:f};                       // Vertical width of the intial strong capping inversion (m).
TBottom              {TBottom:f};                       // Initial potential temperature at bottom of strong capping inversion (K).
TTop                 {TTop:f};                       // Initial potential temperature at top of strong capping inversion (K).




// General conditions and parameters.
Pr                   {Pr:f};                         // Molecular Prandtl number.
Prt                  {Prt:f};                  // Turbulent Prandtl number.
nu                   {nu:g};                      // Molecular viscosity (m^2/s).
TRef                 {TRef:f};                       // Reference potential temperature (K).
latitude             {latitude:f};                        // Latitude on the Earth of the site (deg).
EarthPeriod          {EarthPeriod:f};                        // Earth's rotation period (hr).




// SGS model inputs.
LESModel             {LESModel:s};                // SGS model selection.
ce                   {ce:f};                        // SGS model constant.
ck                   {ck:f};                      // SGS model constant.




// Surface conditions.
qwall               (0.0 0.0 {qwall:f});                // Temperature flux at wall (modify the z-value).  A negative value is flux into domain (K-m/s).
Rwall               ({Rwall[0]:f} {Rwall[1]:f} {Rwall[2]:f} {Rwall[3]:f} {Rwall[4]:f} {Rwall[5]:f});    // Initial wall shear stress (m^2/s^2).
kappa                {kappa:f};                         // von Karman constant.
z0                   {z0:f};                        // Surface roughness (m).
wallModelAverageType "{wallModelAverageType:s}";             // Treat surface stress wall model locally ("local") or with planar averaging ("planarAverage").
betaM                {betaM:f};                        // Monin-Obukhov wall shear stress model constant.
gammaM               {gammaM:f};                         // Monin-Obukhov wall shear stress model constant.
betaH                {betaH:f};                         // Monin-Obukhov wall temperature flux model constant.
gammaH               {gammaH:f};                         // Monin-Obukhov wall temperature flux model constant.
alphaH               {alphaH:f};                         // Monin-Obukhov wall temperature flux model constant.
heatingRate          {heatingRate:g};                         // Surface temperature change rate (when not directly setting temperature flux) (K/s).




#inputMode           merge

// ************************************************************************* //
